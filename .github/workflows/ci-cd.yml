name: CI/CD

on: [push, workflow_dispatch]

env:
  containerRegistryUri: ${{ secrets.CONTAINERREGISTRYURI }}
  containerRegistryUsername: ${{ github.repository_owner }}
  containerRegistryPassword: ${{ secrets.GITHUB_TOKEN }}
  containerImageName: ${{ secrets.CONTAINERIMAGENAME }}

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      semver: ${{ steps.gitversion.outputs.semVer }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use .NET 6
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x    

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    
    - name: Run GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true
        configFilePath: ./GitVersion.yml
    
    - name: bicep build containerApp.bicep
      uses: Azure/bicep-build-action@v1.0.1
      with:
        bicepFilePath: ./deployment/containerApp.bicep
        outputFilePath: ./deployment/containerApp.json
        
    - name: Upload deployment templates
      uses: actions/upload-artifact@v3.1.0
      with:
        name: deployment
        path: ./deployment
                  
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Log into GitHub Container Repository
      uses: docker/login-action@v1
      with:
        registry: ${{ env.containerRegistryUri }}
        username: ${{ env.containerRegistryUsername }}
        password: ${{ env.containerRegistryPassword }}
        
    - name: Build & push image
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ./Dockerfile
        context: .
        platforms: linux/amd64,linux/arm64
        tags: ${{ env.containerRegistryUri }}/${{ github.repository_owner }}/${{ env.containerImageName }}:${{ steps.gitversion.outputs.semver }}
        build-args: |
          version=${{ steps.gitversion.outputs.semVer }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  staging:
    runs-on: ubuntu-latest
    needs: build
    environment: staging

    env:
      resourceGroupName: ${{ secrets.RESOURCEGROUPNAME }}
      containerAppName: ${{ secrets.CONTAINERAPPNAME }}
      containerAppEnvironmentName: ${{ secrets.CONTAINERAPPENVIRONMENTNAME }}
      containerImageTag: ${{ secrets.CONTAINERREGISTRYURI }}/${{ github.repository_owner }}/${{ secrets.CONTAINERIMAGENAME }}:${{ needs.build.outputs.semver }}
      storageAccountName: ${{ secrets.STORAGEACCOUNTNAME }}
      SomeSection__SomeSensitiveSetting: ${{ secrets.SOMESECTION__SOMESENSITIVESETTING }}
      SomeSection__SomeOtherSetting: SomeArbitraryValueWhatevs

    steps:

    - name: Dump GitHub context
      run: echo '${{ toJSON(github) }}'
      if: ${{ false }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: deployment

    - name: Login Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Get Revision with Production Label
      id: getProductionRevision
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $productionRevision = ( .\Get-ContainerAppProductionRevision.ps1 -resourceGroupName ${{ env.resourceGroupName }} -containerAppName ${{ env.containerAppName }} )
          echo "containerAppProductionRevision=$productionRevision" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        azPSVersion: latest
      if: ${{ true }}

    - name: Replace Tokens in containerApp.parameters.json
      uses: cschleiden/replace-tokens@v1.1
      with:
        tokenPrefix: '#{'
        tokenSuffix: '}'
        files: 'containerApp.parameters.json'
        
    - name: Azure Template Deployment
      uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ env.resourceGroupName }}
        template: ./containerApp.json
        parameters: ./containerApp.parameters.json
        deploymentMode: Incremental

    - name: Set Staging Label on Latest Revision
      uses: azure/powershell@v1
      with:
        inlineScript: .\Set-ContainerAppStagingLabel.ps1 -resourceGroupName ${{ env.resourceGroupName }} -containerAppName ${{ env.containerAppName }}
        azPSVersion: latest

  production:
    runs-on: ubuntu-latest
    needs: [build, staging]
    environment: production

    env:
      resourceGroupName: ${{ secrets.RESOURCEGROUPNAME }}
      containerAppName: ${{ secrets.CONTAINERAPPNAME }}

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: deployment

    - name: Login Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
      if: ${{ false }}

    - name: Get Revision with Production Label
      uses: azure/powershell@v1
      with:
        inlineScript: .\Swap-ContainerAppRevisions.ps1 -resourceGroupName ${{ env.resourceGroupName }} -containerAppName ${{ env.containerAppName }}
        azPSVersion: latest
      if: ${{ false }}
      
        
